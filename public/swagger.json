{
  "swagger": "2.0",
  "info": {
    "description": "APIs for Better Quality Automation.",
    "version": "1.0",
    "title": "Better Quality Automation",
    "license": {}
  },
  "host": "184.68.122.34:9085",
  "basePath": "/",
  "tags": [
    {
      "name": "Cloud App",
      "description": "APIs to transfer data to and from cloud app."
    },
    { "name": "Data File", "description": "Data File Controller" },
    { "name": "Data set", "description": "Manage data set apis" },
    { "name": "Debug", "description": "Debug test step APIs" },
    { "name": "Document", "description": "Document Controller" },
    { "name": "Download cloud app", "description": "Download cloud app APIs" },
    {
      "name": "Execution History",
      "description": "Test step execution history APIs"
    },
    { "name": "ExecutionSuite", "description": "Execution Suite APIs" },
    {
      "name": "ExecutionSuiteRun",
      "description": "Execution Suite Run Controller"
    },
    {
      "name": "Image APIs",
      "description": "APIs related to screenshots from recorder app"
    },
    { "name": "Manage Configurations", "description": "Configurations APIs" },
    { "name": "Object Folder", "description": "Manage object folder" },
    { "name": "Object Page", "description": "Manage object folder pages" },
    { "name": "Process", "description": "Manage Test Case Process" },
    { "name": "Project", "description": "Projects APIs" },
    { "name": "Rest api steps", "description": "Rest api step APIs" },
    { "name": "Reusable", "description": "Reusable flow bank APIs" },
    { "name": "Reusable Folder", "description": "Reusable folder APIs" },
    {
      "name": "Reusable Steps execution",
      "description": "Reusable step execution APIs"
    },
    { "name": "Reusable Test Step", "description": "Reusable test step APIs" },
    { "name": "Swimlanes", "description": "Manage Test Case Swimlanes" },
    { "name": "Test Case", "description": "Test case APIs" },
    { "name": "Test Object", "description": "Manage test object." },
    {
      "name": "Test Object locator",
      "description": "Manage test object locators."
    },
    { "name": "Test Plan", "description": "Test plan APIs" },
    { "name": "Test Plan folder", "description": "Manage Test Plan Folders" },
    { "name": "Test Step", "description": "Test step APIs" },
    {
      "name": "Test Steps execution",
      "description": "Test step execution APIs"
    },
    { "name": "User Authentication", "description": "User authentication API" },
    { "name": "User Registration", "description": "User registration API" }
  ],
  "paths": {
    "/api/account": {
      "get": {
        "tags": ["User Authentication"],
        "summary": "getUser",
        "operationId": "getUserUsingGET",
        "produces": ["*/*"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/UserInfo" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/agent/download": {
      "get": {
        "tags": ["Download cloud app"],
        "summary": "downloadAgent",
        "operationId": "downloadAgentUsingGET",
        "produces": ["application/octet-stream"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Resource" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/authenticate/isTokenExpired": {
      "post": {
        "tags": ["User Authentication"],
        "summary": "isTokenExpired",
        "operationId": "isTokenExpiredUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "tokenReq",
            "description": "tokenReq",
            "required": true,
            "schema": { "$ref": "#/definitions/TokenRequest" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/authenticate/isValidToken": {
      "post": {
        "tags": ["User Authentication"],
        "summary": "isValid",
        "operationId": "isValidUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "tokenReq",
            "description": "tokenReq",
            "required": true,
            "schema": { "$ref": "#/definitions/TokenRequest" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/actionevent": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All Action Event",
        "operationId": "getActionEventUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/automated": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All Automated",
        "operationId": "getAllAutomatedUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successfully retrieved  Automated",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/browser": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All Browser",
        "operationId": "getBrowserUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/category": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All Category",
        "operationId": "getAllCategoryUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successfully retrieved  Category",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/cycle": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All Cycle",
        "operationId": "getAllCycleUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successfully retrieved  Cycle",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/locator": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All Locator",
        "operationId": "getLocatorUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/objectType": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All object type",
        "operationId": "getObjectTypeUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/parameters": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All Parameter",
        "operationId": "getParameterUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/priority": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All Priority",
        "operationId": "getAllPriorityUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successfully retrieved  Priority",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/release": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All Release",
        "operationId": "getAllReleaseUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successfully retrieved  Release",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/requestBodyType": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All http request body type",
        "operationId": "getRequestBodyType1UsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/requestBodyTypeSecond": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All http request body type",
        "operationId": "getRequestBodyType2UsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/requestMethods": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All http request method",
        "operationId": "getHttpRequestMethodsUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/rstatus": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All Release Status",
        "operationId": "getReleaseStatusUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successfully retrieved  Release status",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/status": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All statuses",
        "operationId": "getAllStatusUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successfully retrieved  statuses",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "post": {
        "tags": ["Manage Configurations"],
        "summary": "Create or Update PStatus",
        "operationId": "addOrUpdatePStatusUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/PStatus" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status",
            "schema": { "type": "object" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/status/{id}": {
      "delete": {
        "tags": ["Manage Configurations"],
        "summary": "updatePStatus",
        "operationId": "updatePStatusUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "204": { "description": "No Content" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/config/testCaseType": {
      "get": {
        "tags": ["Manage Configurations"],
        "summary": "Get All test case type",
        "operationId": "getTestCaseTypeUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/dataSet": {
      "post": {
        "tags": ["Data set"],
        "summary": "Create new data set",
        "operationId": "createDataSetUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/DataSetReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/DataSetDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/dataSet/testCase/{testCaseId}": {
      "get": {
        "tags": ["Data set"],
        "summary": "Get All data set as list by testCaseId",
        "operationId": "getAllListUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/DataSetList" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/dataSet/{id}": {
      "get": {
        "tags": ["Data set"],
        "summary": "Get data set by Id",
        "operationId": "getUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/DataSetDTO" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Data set"],
        "summary": "Update data set",
        "operationId": "updateDataSetUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/DataSetReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/DataSetDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Data set"],
        "summary": "Delete data set",
        "operationId": "deleteDataSetUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "204": { "description": "No Content" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/dataSet/{id}/add": {
      "put": {
        "tags": ["Data set"],
        "summary": "adding data set column",
        "operationId": "addColumnUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/DataSetList" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/dataSet/{id}/update": {
      "put": {
        "tags": ["Data set"],
        "summary": "update data set column",
        "operationId": "updateColumnUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "newValue",
            "in": "query",
            "description": "newValue",
            "required": true,
            "type": "string"
          },
          {
            "name": "oldValue",
            "in": "query",
            "description": "oldValue",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/DataSetList" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/dataSet/{id}/{testStepId}/delete": {
      "post": {
        "tags": ["Data set"],
        "summary": "delete data set column by column name and testCaseId",
        "operationId": "deleteColumnUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "column",
            "in": "query",
            "description": "column",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testStepId",
            "in": "path",
            "description": "testStepId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/datafile/testcase/{testCaseId}": {
      "post": {
        "tags": ["Data File"],
        "summary": "Set Test Case data file",
        "operationId": "addTestCaseDataFileUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully set test case data file",
            "schema": { "type": "object" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/datafile/testcase/{testCaseId}/data": {
      "post": {
        "tags": ["Data File"],
        "summary": "Get data excel data row",
        "operationId": "getExcelDataUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/ExcelDataRequest" }
          },
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": { "type": "string" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/debug/start": {
      "post": {
        "tags": ["Debug"],
        "summary": "startExecute",
        "operationId": "startExecuteUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/StartDebugReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/StartDebugResponse" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/debug/testCase/{testCaseId}": {
      "get": {
        "tags": ["Debug"],
        "summary": "Get Debug Test Step by testCaseId",
        "operationId": "getDebugStepsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/DebugStepList" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/debug/{testCaseId}/{debugExecuteId}/resume": {
      "post": {
        "tags": ["Debug"],
        "summary": "resumeExecute",
        "operationId": "resumeExecuteUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "debugExecuteId",
            "in": "path",
            "description": "debugExecuteId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/debug/{testCaseId}/{debugExecuteId}/stop": {
      "post": {
        "tags": ["Debug"],
        "summary": "stopExecute",
        "operationId": "stopExecuteUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "debugExecuteId",
            "in": "path",
            "description": "debugExecuteId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/document/download": {
      "get": {
        "tags": ["Document"],
        "summary": "Download File by key ",
        "operationId": "downloadDocumentUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/DocumentByKeyReq" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/document/url": {
      "post": {
        "tags": ["Document"],
        "summary": "Get Document Url by key ",
        "operationId": "getDocumentUrlUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/DocumentByKeyReq" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/execute/start": {
      "post": {
        "tags": ["Test Steps execution"],
        "summary": "startExecute",
        "operationId": "startExecuteUsingPOST_2",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/StartExecuteRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/StartExecuteResponse" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/execute/{testCaseId}/{testCaseExecuteId}/pause": {
      "post": {
        "tags": ["Test Steps execution"],
        "summary": "pauseExecute",
        "operationId": "pauseExecuteUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "testCaseExecuteId",
            "in": "path",
            "description": "testCaseExecuteId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/execute/{testCaseId}/{testCaseExecuteId}/resume": {
      "post": {
        "tags": ["Test Steps execution"],
        "summary": "resumeExecute",
        "operationId": "resumeExecuteUsingPOST_2",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "testCaseExecuteId",
            "in": "path",
            "description": "testCaseExecuteId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/execute/{testCaseId}/{testCaseExecuteId}/stop": {
      "post": {
        "tags": ["Test Steps execution"],
        "summary": "stopExecute",
        "operationId": "stopExecuteUsingPOST_2",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "testCaseExecuteId",
            "in": "path",
            "description": "testCaseExecuteId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/executeResults/testcase/{testCaseId}": {
      "get": {
        "tags": ["Execution History"],
        "summary": "getExecutionHistoryList",
        "operationId": "getExecutionHistoryListUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ExecutionHistoryList" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/executeResults/{executionId}": {
      "get": {
        "tags": ["Execution History"],
        "summary": "getAllExecutionResult",
        "operationId": "getAllExecutionResultUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "description": "executionId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ExecutionResultResponse" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/executionSuite": {
      "post": {
        "tags": ["ExecutionSuite"],
        "summary": "Create execution suite",
        "operationId": "createExecutionSuiteUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/ExecutionSuiteReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ExecutionSuiteDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/executionSuite/addTestCase": {
      "post": {
        "tags": ["ExecutionSuite"],
        "summary": "Add execution suite test case",
        "operationId": "addTestCaseUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/ExecutionSuiteUpdateReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ExecutionSuiteTestCaseList" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/executionSuite/deleteTestCase": {
      "post": {
        "tags": ["ExecutionSuite"],
        "summary": "Delete execution suite test case",
        "operationId": "deleteTestCaseUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/MultiDelReq" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/executionSuite/project/{projectId}": {
      "get": {
        "tags": ["ExecutionSuite"],
        "summary": "Get execution suites list by projectId",
        "operationId": "getExecutionSuitesByProjectIdUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paged",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sort.sorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort.unsorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "unpaged",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ExecutionSuiteList" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/executionSuite/seq": {
      "post": {
        "tags": ["ExecutionSuite"],
        "summary": "Update Seq",
        "operationId": "updateSeqUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SeqNumReq" }
            }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/executionSuite/{id}": {
      "get": {
        "tags": ["ExecutionSuite"],
        "summary": "Get execution suite by Id",
        "operationId": "getExecutionSuiteUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ExecutionSuiteDTO" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["ExecutionSuite"],
        "summary": "Update execution suite",
        "operationId": "updateExecutionSuiteUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/ExecutionSuiteReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ExecutionSuiteDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["ExecutionSuite"],
        "summary": "Delete execution suite",
        "operationId": "deleteExecutionSuiteUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "204": { "description": "No Content" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/executionSuite/{id}/scope": {
      "post": {
        "tags": ["ExecutionSuite"],
        "summary": "Update execution suite scope",
        "operationId": "updateScopeUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/ExecutionSuiteScopeReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ExecutionSuiteTestCaseList" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/executionSuiteRun/start": {
      "post": {
        "tags": ["ExecutionSuiteRun"],
        "summary": "Start execution suite run with selected or all the test cases.",
        "operationId": "startExecutionSuiteRunUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/ExecutionSuiteRunReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ExecutionSuiteRunResponse" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/executionSuiteRun/{executionSuiteRunId}/testCases": {
      "get": {
        "tags": ["Cloud App"],
        "summary": "getExecutionSuiteRunTestCases",
        "operationId": "getExecutionSuiteRunTestCasesUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "executionSuiteRunId",
            "in": "path",
            "description": "executionSuiteRunId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ExecutionSuiteRunTestCase" }
            }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/images": {
      "put": {
        "tags": ["Image APIs"],
        "summary": "saveImage",
        "operationId": "saveImageUsingPUT",
        "consumes": ["multipart/form-data"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "file",
            "description": "file",
            "required": false,
            "schema": { "type": "string", "format": "binary" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "string" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/images/{id}": {
      "get": {
        "tags": ["Image APIs"],
        "summary": "getImage",
        "operationId": "getImageUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Image" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectFolder": {
      "post": {
        "tags": ["Object Folder"],
        "summary": "Create New object folder",
        "operationId": "createObjectFolderUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/ObjectFolderReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ObjectFolderDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectFolder/objects/{projectId}": {
      "get": {
        "tags": ["Object Folder"],
        "summary": "Get object folder list by project id",
        "operationId": "getObjectFolderListByProjectIdUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "sortBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ObjectFolderListRes" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectFolder/parent/{parentId}": {
      "get": {
        "tags": ["Object Folder"],
        "summary": "Get All folders as list by parentId",
        "operationId": "getAllChildUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "parentId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectFolder/project/{projectId}": {
      "get": {
        "tags": ["Object Folder"],
        "summary": "Get All folders as list by project Id",
        "operationId": "getAllListUsingGET_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectFolder/{id}": {
      "get": {
        "tags": ["Object Folder"],
        "summary": "Get Object Folder by Id",
        "operationId": "getUsingGET_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ObjectFolderDTO" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Object Folder"],
        "summary": "Update object folder",
        "operationId": "updateObjectFolderUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/ObjectFolderReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ObjectFolderDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Object Folder"],
        "summary": "Delete object folder",
        "operationId": "deleteTpFolderUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "204": { "description": "No Content" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectFolder/{id}/copy": {
      "post": {
        "tags": ["Object Folder"],
        "summary": "copy object",
        "operationId": "copyUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "objectPageCopyReq",
            "description": "objectPageCopyReq",
            "required": true,
            "schema": { "$ref": "#/definitions/ObjectPageCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ObjectFolderDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectFolder/{id}/move": {
      "put": {
        "tags": ["Object Folder"],
        "summary": "cut object",
        "operationId": "moveUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "objectPageCopyReq",
            "description": "objectPageCopyReq",
            "required": true,
            "schema": { "$ref": "#/definitions/ObjectPageCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ObjectFolderDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectLocator": {
      "post": {
        "tags": ["Test Object locator"],
        "summary": "Create New test object locator",
        "operationId": "createObjectLocatorUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/LocatorRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/LocatorDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectLocator/object/{objectId}": {
      "get": {
        "tags": ["Test Object locator"],
        "summary": "Get All object locators as list by object Id",
        "operationId": "getAllListUsingGET_2",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "objectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectLocator/{id}": {
      "get": {
        "tags": ["Test Object locator"],
        "summary": "Get test object locator by Id",
        "operationId": "getUsingGET_2",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/LocatorDTO" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Test Object locator"],
        "summary": "Update test object",
        "operationId": "updateTestObjectUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/LocatorRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/LocatorDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Test Object locator"],
        "summary": "Delete test object locator",
        "operationId": "deleteUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "204": { "description": "No Content" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectPage": {
      "post": {
        "tags": ["Object Page"],
        "summary": "Create New object page",
        "operationId": "createObjectPageUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/ObjectPageReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ObjectPageDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectPage/folder/{folderId}": {
      "get": {
        "tags": ["Object Page"],
        "summary": "Get All pages as list by folder Id",
        "operationId": "getAllListUsingGET_3",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "folderId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "sortBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectPage/{id}": {
      "get": {
        "tags": ["Object Page"],
        "summary": "Get Object page by Id",
        "operationId": "getUsingGET_3",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ObjectPageDTO" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Object Page"],
        "summary": "Update object page",
        "operationId": "updateObjectPageUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/ObjectPageReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ObjectPageDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Object Page"],
        "summary": "Delete object page",
        "operationId": "deleteTpFolderUsingDELETE_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "204": { "description": "No Content" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectPage/{id}/copy": {
      "post": {
        "tags": ["Object Page"],
        "summary": "copy object page",
        "operationId": "copyUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "objectPageCopyReq",
            "description": "objectPageCopyReq",
            "required": true,
            "schema": { "$ref": "#/definitions/ObjectPageCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ObjectPageDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/objectPage/{id}/move": {
      "put": {
        "tags": ["Object Page"],
        "summary": "cut object page",
        "operationId": "moveUsingPUT_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "objectPageCopyReq",
            "description": "objectPageCopyReq",
            "required": true,
            "schema": { "$ref": "#/definitions/ObjectPageCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ObjectPageDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/project": {
      "get": {
        "tags": ["Project"],
        "summary": "Get All projects by Id",
        "operationId": "getAllUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paged",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort.sorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort.unsorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "unpaged",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved  projects",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "post": {
        "tags": ["Project"],
        "summary": "Create Project",
        "operationId": "addProjectUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/ProjectRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created project",
            "schema": { "$ref": "#/definitions/ProjectDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/project/delete-multi": {
      "delete": {
        "tags": ["Project"],
        "summary": "Delete project",
        "operationId": "deleteProjectUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "paylod",
            "description": "paylod",
            "required": true,
            "schema": { "$ref": "#/definitions/ProjectMultiDelReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted projects",
            "schema": { "type": "boolean" }
          },
          "204": { "description": "No Content" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/project/names": {
      "get": {
        "tags": ["Project"],
        "summary": "Get All Names",
        "operationId": "getAllProjectNamesUsingGET",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/project/{id}": {
      "get": {
        "tags": ["Project"],
        "summary": "Get Project by Id",
        "operationId": "getProjectDetailUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved project",
            "schema": { "$ref": "#/definitions/ProjectDto" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Project"],
        "summary": "Update project",
        "operationId": "updateProjectUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/ProjectRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated project",
            "schema": { "$ref": "#/definitions/ProjectDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Project"],
        "summary": "Delete project",
        "operationId": "deleteProjectUsingDELETE_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted project",
            "schema": { "type": "boolean" }
          },
          "204": { "description": "No Content" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/projects/{projectId}/testPlans/{testPlanId}/testCases/{testCaseId}/actions": {
      "get": {
        "tags": ["Cloud App"],
        "summary": "getAllSwimlaneActions",
        "operationId": "getAllSwimlaneActionsUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "datasetName",
            "in": "query",
            "description": "datasetName",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testPlanId",
            "in": "path",
            "description": "testPlanId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SwimlaneActionDTOList" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/projects/{projectId}/testPlans/{testPlanId}/testCases/{testCaseId}/actions/debug": {
      "get": {
        "tags": ["Cloud App"],
        "summary": "getAllDebugActions",
        "operationId": "getAllDebugActionsUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "datasetName",
            "in": "query",
            "description": "datasetName",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testPlanId",
            "in": "path",
            "description": "testPlanId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/DebugActionList" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/projects/{projectId}/testPlans/{testPlanId}/testCases/{testCaseId}/actions/step/{stepId}/debug": {
      "get": {
        "tags": ["Cloud App"],
        "summary": "getDebugActions",
        "operationId": "getDebugActionsUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "datasetName",
            "in": "query",
            "description": "datasetName",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "stepId",
            "in": "path",
            "description": "stepId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testPlanId",
            "in": "path",
            "description": "testPlanId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TestStepActionDto" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/register": {
      "post": {
        "tags": ["User Registration"],
        "summary": "register",
        "operationId": "registerUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/UserDto" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "string" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/restApiStep": {
      "post": {
        "tags": ["Rest api steps"],
        "summary": "Create new reusable rest api step",
        "operationId": "createRestApiStepUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": { "$ref": "#/definitions/RestApiStepReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/RestApiStepDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/restApiStep/{id}": {
      "get": {
        "tags": ["Rest api steps"],
        "summary": "Get reusable rest api step by Id",
        "operationId": "getUsingGET_4",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/RestApiStepDTO" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Rest api steps"],
        "summary": "Update reusable rest api step",
        "operationId": "updateRestApiStepUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": { "$ref": "#/definitions/RestApiStepReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/RestApiStepDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable": {
      "post": {
        "tags": ["Reusable"],
        "summary": "Create new reusable flow",
        "operationId": "createReusableFlowUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": { "$ref": "#/definitions/ReusableReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/allFlows/{projectId}": {
      "get": {
        "tags": ["Reusable"],
        "summary": "Get All reusable flow as list by project Id",
        "operationId": "getAllReusableFlowsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableDtoList" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/copy": {
      "post": {
        "tags": ["Reusable"],
        "summary": "Copy/Paste ReusableFlow by Id",
        "operationId": "copyUsingPOST_2",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": { "$ref": "#/definitions/ReusableCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/execute/start": {
      "post": {
        "tags": ["Reusable Steps execution"],
        "summary": "startExecute",
        "operationId": "startExecuteUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/ReusableStartExecuteRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableStartExecuteResponse" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/execute/{reusableId}/record": {
      "post": {
        "tags": ["Reusable Steps execution"],
        "summary": "record",
        "operationId": "recordUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "reusableId",
            "in": "path",
            "description": "reusableId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/execute/{reusableId}/{reusableExecuteId}/pause": {
      "post": {
        "tags": ["Reusable Steps execution"],
        "summary": "pauseExecute",
        "operationId": "pauseExecuteUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "reusableExecuteId",
            "in": "path",
            "description": "reusableExecuteId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "reusableId",
            "in": "path",
            "description": "reusableId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/execute/{reusableId}/{reusableExecuteId}/resume": {
      "post": {
        "tags": ["Reusable Steps execution"],
        "summary": "resumeExecute",
        "operationId": "resumeExecuteUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "reusableExecuteId",
            "in": "path",
            "description": "reusableExecuteId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "reusableId",
            "in": "path",
            "description": "reusableId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/execute/{reusableId}/{reusableExecuteId}/stop": {
      "post": {
        "tags": ["Reusable Steps execution"],
        "summary": "stopExecute",
        "operationId": "stopExecuteUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "reusableExecuteId",
            "in": "path",
            "description": "reusableExecuteId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "reusableId",
            "in": "path",
            "description": "reusableId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/move": {
      "put": {
        "tags": ["Reusable"],
        "summary": "Cut/Paste ReusableFlow by Id",
        "operationId": "moveUsingPUT_2",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": { "$ref": "#/definitions/ReusableCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/project/{projectId}": {
      "get": {
        "tags": ["Reusable"],
        "summary": "Get All reusable flow as list by project Id",
        "operationId": "getAllListUsingGET_4",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableDtoList" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/{id}": {
      "get": {
        "tags": ["Reusable"],
        "summary": "Get reusable flow by Id",
        "operationId": "getUsingGET_5",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableDto" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Reusable"],
        "summary": "Update reusable flow",
        "operationId": "updateReusableFlowUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": { "$ref": "#/definitions/ReusableReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Reusable"],
        "summary": "Delete reusable flow",
        "operationId": "deleteReusableFlowUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "204": { "description": "No Content" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/{id}/edit": {
      "post": {
        "tags": ["Reusable"],
        "summary": "Edit ReusableFlow by Id",
        "operationId": "startEditUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableLockDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/{id}/isLocked": {
      "get": {
        "tags": ["Reusable"],
        "summary": "IsLocked ReusableFlow by Id",
        "operationId": "isLockedUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusable/{id}/unlock": {
      "post": {
        "tags": ["Reusable"],
        "summary": "Unlock ReusableFlow by Id",
        "operationId": "unlockUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableFolder": {
      "post": {
        "tags": ["Reusable Folder"],
        "summary": "Create new reusable folder",
        "operationId": "createFolderUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/ReusableFolderReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableFolderDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableFolder/parent/{parentId}": {
      "get": {
        "tags": ["Reusable Folder"],
        "summary": "Get All folders as list by parentId",
        "operationId": "getAllChildUsingGET_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "parentId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableFolder/project/{projectId}": {
      "get": {
        "tags": ["Reusable Folder"],
        "summary": "Get All folders as list by project Id",
        "operationId": "getAllListUsingGET_5",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableFolder/{id}": {
      "get": {
        "tags": ["Reusable Folder"],
        "summary": "Get reusable folder by Id",
        "operationId": "getUsingGET_6",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableFolderDTO" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Reusable Folder"],
        "summary": "Update reusable folder",
        "operationId": "updateReusableFolderUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/ReusableFolderReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableFolderDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Reusable Folder"],
        "summary": "Delete reusable folder",
        "operationId": "deleteReusableFolderUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "204": { "description": "No Content" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableFolder/{id}/copy": {
      "post": {
        "tags": ["Reusable Folder"],
        "summary": "copy reusable folder",
        "operationId": "copyUsingPOST_3",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "reusableFolderCopyReq",
            "description": "reusableFolderCopyReq",
            "required": true,
            "schema": { "$ref": "#/definitions/ReusableFolderCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableFolderDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableFolder/{id}/move": {
      "put": {
        "tags": ["Reusable Folder"],
        "summary": "cut reusable folder",
        "operationId": "moveUsingPUT_3",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "reusableFolderCopyReq",
            "description": "reusableFolderCopyReq",
            "required": true,
            "schema": { "$ref": "#/definitions/ReusableFolderCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableFolderDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableTestStep": {
      "post": {
        "tags": ["Reusable Test Step"],
        "summary": "Create new reusable test step",
        "operationId": "createReusableTestStepUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": { "$ref": "#/definitions/ReusableTestStepReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableTestStepDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableTestStep/active/{id}": {
      "put": {
        "tags": ["Reusable Test Step"],
        "summary": "Update reusable test step active status",
        "operationId": "updateTestStepActiveStatusUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/ReusableTestStepReq" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableTestStep/delete-multi": {
      "post": {
        "tags": ["Reusable Test Step"],
        "summary": "Delete reusable test steps",
        "operationId": "deleteReusableTestStepsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "paylod",
            "description": "paylod",
            "required": true,
            "schema": { "$ref": "#/definitions/MultiDelReq" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableTestStep/project/{projectId}/reusableFlow/{reusableFlowId}/add": {
      "post": {
        "tags": ["Reusable Test Step"],
        "summary": "Uploading recorded reusable test step to dp from cloud app",
        "operationId": "addRecordedStepsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "reusableFlowId",
            "in": "path",
            "description": "reusableFlowId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "testSteps",
            "description": "testSteps",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/RecordTestStepReq" }
            }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableTestStep/project/{projectId}/reusableFlow/{reusableFlowId}/steps": {
      "get": {
        "tags": ["Reusable Test Step"],
        "summary": "Sending reusable steps to cloud app for execution",
        "operationId": "getReusableTestStepsUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "datasetName",
            "in": "query",
            "description": "datasetName",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "reusableFlowId",
            "in": "path",
            "description": "reusableFlowId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TestStepActionDto" }
            }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableTestStep/reusable/{reusableId}": {
      "get": {
        "tags": ["Reusable Test Step"],
        "summary": "Get All reusable test step as list by reusable Id",
        "operationId": "getAllListUsingGET_6",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "reusableId",
            "in": "path",
            "description": "reusableId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/reusableTestStep/{id}": {
      "get": {
        "tags": ["Reusable Test Step"],
        "summary": "Get reusable test step by Id",
        "operationId": "getUsingGET_7",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableTestStepDto" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Reusable Test Step"],
        "summary": "Update reusable test step",
        "operationId": "updateReusableTestStepUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": { "$ref": "#/definitions/ReusableTestStepReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ReusableTestStepDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/signIn": {
      "post": {
        "tags": ["User Authentication"],
        "summary": "userAuthenticate",
        "operationId": "userAuthenticateUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/LoginDto" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/add/after": {
      "post": {
        "tags": ["Process"],
        "summary": "Create New Test Case Process After",
        "operationId": "createTcProcessAfterUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created Test Case Process After",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/add/after/decision": {
      "post": {
        "tags": ["Process"],
        "summary": "Create New Decision Test Case Process",
        "operationId": "createDecisionTcProcessAfterUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessDecisionReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created Decision Test Case Process",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/add/before": {
      "post": {
        "tags": ["Process"],
        "summary": "Create New Test Case Process Before",
        "operationId": "createTcProcessBeforeUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created Test Case Process Before",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/add/before/decision": {
      "post": {
        "tags": ["Process"],
        "summary": "Create New Decision Test Case Process",
        "operationId": "createDecisionTcProcessBeforeUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessDecisionReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created Decision Test Case Process",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/connect": {
      "post": {
        "tags": ["Process"],
        "summary": "Connect Process",
        "operationId": "connectUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessConnectReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully connected Process",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/copy": {
      "post": {
        "tags": ["Process"],
        "summary": "Copy TC Process",
        "operationId": "copyTcProcessUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully copy TC Process",
            "schema": { "$ref": "#/definitions/TcProcessDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/copy/after": {
      "post": {
        "tags": ["Process"],
        "summary": "Copy and paste Process After",
        "operationId": "copyAndPasteAfterUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Copy and paste Process After",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/copy/before": {
      "post": {
        "tags": ["Process"],
        "summary": "Copy and paste Process Before",
        "operationId": "copyAndPasteBeforeUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Copy and paste Process Before",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/cut/after": {
      "post": {
        "tags": ["Process"],
        "summary": "Cut and paste Process After",
        "operationId": "cutAndPasteAfterUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessCutReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Cut and paste Process After",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/cut/before": {
      "post": {
        "tags": ["Process"],
        "summary": "Cut and paste Process Before",
        "operationId": "cutAndPasteBeforeUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessCutReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Cut and paste Process Before",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/delete-multi": {
      "post": {
        "tags": ["Process"],
        "summary": "Delete processes",
        "operationId": "deleteProcessesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "paylod",
            "description": "paylod",
            "required": true,
            "schema": { "$ref": "#/definitions/MultiDelReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted processes",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/disconnect": {
      "post": {
        "tags": ["Process"],
        "summary": "Disconnect Process",
        "operationId": "disconnectUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessConnectReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully disconnected Process",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/first": {
      "post": {
        "tags": ["Process"],
        "summary": "Create First Test Case Process ",
        "operationId": "createFirstTcProcessUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created Test Case Process After",
            "schema": { "$ref": "#/definitions/TcProcessDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/seq": {
      "post": {
        "tags": ["Process"],
        "summary": "Update Seq",
        "operationId": "updateSeqUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SeqNumReq" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated seq",
            "schema": { "type": "object" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/tcswimlane/{tcSwimlaneId}": {
      "get": {
        "tags": ["Process"],
        "summary": "Get All Test Case Processs by test case Id",
        "operationId": "getAllUsingGET_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tcSwimlaneId",
            "in": "path",
            "description": "tcSwimlaneId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved  Test Case Processs",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/{id}": {
      "get": {
        "tags": ["Process"],
        "summary": "Get Test Case Process by Id",
        "operationId": "getUsingGET_8",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Test Case Process",
            "schema": { "$ref": "#/definitions/TcProcessDTO" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Process"],
        "summary": "Update Test Case Process",
        "operationId": "updateTcProcessUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcProcessUpdateReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Test Case Process",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Process"],
        "summary": "Delete process",
        "operationId": "deleteProcessUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted process",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcProcessDTO" }
            }
          },
          "204": { "description": "No Content" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/{id}/connectToStart": {
      "post": {
        "tags": ["Process"],
        "summary": "ConnectToStart",
        "operationId": "connectToStartUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully ",
            "schema": { "$ref": "#/definitions/TcProcessDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcprocess/{processId}/next/available": {
      "get": {
        "tags": ["Process"],
        "summary": "Get All Next available processes ",
        "operationId": "getNextAvailableUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "processId",
            "in": "path",
            "description": "processId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "testCaseId",
            "in": "query",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved  Next available processes",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/NextAvailablePrcDTO" }
            }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcswimlane": {
      "post": {
        "tags": ["Swimlanes"],
        "summary": "Create First SwimLane with Dummy Process",
        "operationId": "createTcSwimlaneUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcSwimlaneReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created Test Case Swimlane",
            "schema": { "$ref": "#/definitions/TcSwimlaneDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcswimlane/after": {
      "post": {
        "tags": ["Swimlanes"],
        "summary": "Create SwimLane After",
        "operationId": "createTcSwimlaneAfterUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcSwimlaneReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created Test Case Swimlane",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcSwimlaneDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcswimlane/before": {
      "post": {
        "tags": ["Swimlanes"],
        "summary": "Create SwimLane Before",
        "operationId": "createTcSwimlaneBeforeUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcSwimlaneReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created Test Case Swimlane",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcSwimlaneDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcswimlane/delete-multi": {
      "post": {
        "tags": ["Swimlanes"],
        "summary": "Delete swimlanes",
        "operationId": "deleteProcessesUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "paylod",
            "description": "paylod",
            "required": true,
            "schema": { "$ref": "#/definitions/MultiDelSwimlaneReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted swimlanes",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcSwimlaneDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcswimlane/seq": {
      "post": {
        "tags": ["Swimlanes"],
        "summary": "Update Seq",
        "operationId": "updateSeqUsingPOST_2",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SeqNumReq" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated seq",
            "schema": { "type": "object" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcswimlane/testcase/{testcaseId}": {
      "get": {
        "tags": ["Swimlanes"],
        "summary": "Get All Test Case Swimlanes by test case Id",
        "operationId": "getAllUsingGET_2",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "testcaseId",
            "in": "path",
            "description": "testcaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved  Test Case Swimlanes",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcswimlane/{id}": {
      "get": {
        "tags": ["Swimlanes"],
        "summary": "Get Test Case Swimlane by Id",
        "operationId": "getUsingGET_9",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Test Case Swimlane",
            "schema": { "$ref": "#/definitions/TcSwimlaneDTO" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Swimlanes"],
        "summary": "Update Test Case Swimlane",
        "operationId": "updateTcSwimlaneUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcSwimlaneUpdateReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Test Case Swimlane",
            "schema": { "$ref": "#/definitions/TcSwimlaneDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Swimlanes"],
        "summary": "Delete swimlane",
        "operationId": "deleteSwimlaneUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted swimlane",
            "schema": { "type": "boolean" }
          },
          "204": { "description": "No Content" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcswimlane/{id}/moveAfter": {
      "post": {
        "tags": ["Swimlanes"],
        "summary": "Swimlane move after",
        "operationId": "moveAfterUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcSwimlaneMoveReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Test Case Swimlane",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcSwimlaneDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcswimlane/{id}/moveAfterSingle": {
      "post": {
        "tags": ["Swimlanes"],
        "summary": "Swimlane SINGLE PROCESS CUT AND PASTE AFTER",
        "operationId": "moveAfterSingleUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcSwimlaneMoveSingleReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Test Case Swimlane",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcSwimlaneDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcswimlane/{id}/moveBefore": {
      "post": {
        "tags": ["Swimlanes"],
        "summary": "Swimlane move before",
        "operationId": "moveBeforeUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcSwimlaneMoveReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Test Case Swimlane",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcSwimlaneDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tcswimlane/{id}/moveBeforeSingle": {
      "post": {
        "tags": ["Swimlanes"],
        "summary": "Swimlane SINGLE PROCESS CUT AND PASTE BEFORE",
        "operationId": "moveBeforeSingleUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcSwimlaneMoveSingleReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Test Case Swimlane",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TcSwimlaneDTO" }
            }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase": {
      "post": {
        "tags": ["Test Case"],
        "summary": "Create New TestCase",
        "operationId": "createTestCaseUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TestCaseRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TestCaseDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/paths": {
      "post": {
        "tags": ["Test Case"],
        "summary": "Get TestCases Path by Ids",
        "operationId": "getPathUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TestCaseIdsReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved testCase path",
            "schema": { "$ref": "#/definitions/TestCasePathsDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/testplan/{testplanId}": {
      "get": {
        "tags": ["Test Case"],
        "summary": "Get All testCases by test plan Id",
        "operationId": "getAllByTestPlanIdUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paged",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort.sorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort.unsorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "testplanId",
            "in": "path",
            "description": "testplanId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "unpaged",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/tpFolder/{tpFolderId}": {
      "get": {
        "tags": ["Test Case"],
        "summary": "Get All testCases by Folder Id",
        "operationId": "getAllByFolderIdUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paged",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort.sorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort.unsorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tpFolderId",
            "in": "path",
            "description": "tpFolderId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "unpaged",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/{id}": {
      "get": {
        "tags": ["Test Case"],
        "summary": "Get TestCase by Id",
        "operationId": "getUsingGET_10",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TestCaseDto" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Test Case"],
        "summary": "Update testCase",
        "operationId": "updateTestCaseUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TestCaseUpdateReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TestCaseDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Test Case"],
        "summary": "Delete testcase",
        "operationId": "deleteTestCaseUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "204": { "description": "No Content" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/{id}/activitylog": {
      "get": {
        "tags": ["Test Case"],
        "summary": "Get Activitylog by testcaseId",
        "operationId": "getLogsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paged",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort.sorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort.unsorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "unpaged",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved activitylogs",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "post": {
        "tags": ["Test Case"],
        "summary": "Create Activity Log",
        "operationId": "createActivityLogUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TcActivityLogReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created activitylog",
            "schema": { "type": "boolean" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/{id}/checkundo": {
      "get": {
        "tags": ["Test Case"],
        "summary": "Check undo/redo allowed for TestCase by Id",
        "operationId": "checkUndoUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully check",
            "schema": { "$ref": "#/definitions/CheckUndo" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/{id}/copy": {
      "post": {
        "tags": ["Test Case"],
        "summary": "Copy Test Case",
        "operationId": "copyTestCaseUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TestCaseCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully copied Test Case",
            "schema": { "$ref": "#/definitions/TestCaseDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/{id}/edit": {
      "post": {
        "tags": ["Test Case"],
        "summary": "Edit TestCase by Id",
        "operationId": "startEditUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TcLockDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/{id}/isLocked": {
      "get": {
        "tags": ["Test Case"],
        "summary": "IsLocked TestCase by Id",
        "operationId": "isLockedUsingGET_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully get isLocked",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/{id}/move": {
      "put": {
        "tags": ["Test Case"],
        "summary": "Move testCase",
        "operationId": "moveTestCaseUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TestCaseUpdateReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully moved testCase",
            "schema": { "$ref": "#/definitions/TestCaseDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/{id}/redo": {
      "post": {
        "tags": ["Test Case"],
        "summary": "Redo TestCase by Id",
        "operationId": "redoUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully redo",
            "schema": { "$ref": "#/definitions/TestCaseDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/{id}/tctemp": {
      "post": {
        "tags": ["Test Case"],
        "summary": "Create TestCase Temp",
        "operationId": "createTcTempUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TestCaseUpdateReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created testcase temp",
            "schema": { "type": "boolean" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/{id}/undo": {
      "post": {
        "tags": ["Test Case"],
        "summary": "Undo TestCase by Id",
        "operationId": "undoUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully undo",
            "schema": { "$ref": "#/definitions/TestCaseDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCase/{id}/unlock": {
      "post": {
        "tags": ["Test Case"],
        "summary": "Unlock TestCase by Id",
        "operationId": "unlockUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unlocked",
            "schema": { "type": "boolean" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testCases/{testCaseId}/actions": {
      "get": {
        "tags": ["Cloud App"],
        "summary": "getAllSwimlaneActions",
        "operationId": "getAllSwimlaneActionsUsingGET_1",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "datasetName",
            "in": "query",
            "description": "datasetName",
            "required": false,
            "type": "string"
          },
          {
            "name": "testCaseId",
            "in": "path",
            "description": "testCaseId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SwimlaneActionDTOList" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testObject": {
      "post": {
        "tags": ["Test Object"],
        "summary": "Create New test object",
        "operationId": "createTestObjectUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TestObjectReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TestObjectDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testObject/page/{pageId}": {
      "get": {
        "tags": ["Test Object"],
        "summary": "Get All objects as list by page Id",
        "operationId": "getAllListUsingGET_7",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "pageId",
            "in": "path",
            "description": "pageId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "sortBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testObject/{id}": {
      "get": {
        "tags": ["Test Object"],
        "summary": "Get test object by Id",
        "operationId": "getUsingGET_11",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TestObjectDTO" }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Test Object"],
        "summary": "Update test object",
        "operationId": "updateTestObjectUsingPUT_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TestObjectUpdateReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TestObjectDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Test Object"],
        "summary": "Delete test object",
        "operationId": "deleteUsingDELETE_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "204": { "description": "No Content" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testObject/{id}/copy": {
      "post": {
        "tags": ["Test Object"],
        "summary": "copy test object",
        "operationId": "copyUsingPOST_4",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "testObjectCopyReq",
            "description": "testObjectCopyReq",
            "required": true,
            "schema": { "$ref": "#/definitions/TestObjectCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TestObjectDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testObject/{id}/move": {
      "put": {
        "tags": ["Test Object"],
        "summary": "cut test object",
        "operationId": "moveUsingPUT_4",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "testObjectCopyReq",
            "description": "testObjectCopyReq",
            "required": true,
            "schema": { "$ref": "#/definitions/TestObjectCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TestObjectDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testStep": {
      "post": {
        "tags": ["Test Step"],
        "summary": "Create New Test Step",
        "operationId": "createTestStepUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TestStepReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created testStep",
            "schema": { "$ref": "#/definitions/TestStepDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testStep/active/{id}": {
      "put": {
        "tags": ["Test Step"],
        "summary": "Update Test Step active status",
        "operationId": "updateTestStepActiveStatusUsingPUT_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TestStepUpdateReq" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "boolean" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testStep/addReusable": {
      "post": {
        "tags": ["Test Step"],
        "summary": "Add existing Reusable flow as Test Step",
        "operationId": "addReusableFlowAsStepUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": { "$ref": "#/definitions/AddReusableAsStepReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TestStepDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testStep/copy": {
      "post": {
        "tags": ["Test Step"],
        "summary": "Copy Test Step from Reusable to main and vice-versa",
        "operationId": "copyTestStepUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": { "$ref": "#/definitions/TestStepCopyReq" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testStep/createReusable": {
      "post": {
        "tags": ["Test Step"],
        "summary": "Create New Reusable flow as Test Step",
        "operationId": "createReusableFlowAsStepUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateReusableAsStepReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TestStepDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testStep/delete-multi": {
      "post": {
        "tags": ["Test Step"],
        "summary": "Delete testSteps",
        "operationId": "deleteProcessesUsingPOST_2",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "paylod",
            "description": "paylod",
            "required": true,
            "schema": { "$ref": "#/definitions/MultiDelReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted testSteps",
            "schema": { "type": "object" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testStep/move": {
      "post": {
        "tags": ["Test Step"],
        "summary": "Cut Test Step from Reusable to main and vice-versa",
        "operationId": "moveTestStepUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TestStepCopyReq" }
          }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object" } },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testStep/seq": {
      "post": {
        "tags": ["Test Step"],
        "summary": "Update Seq",
        "operationId": "updateSeqUsingPOST_3",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SeqNumReq" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated seq",
            "schema": { "type": "object" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testStep/tcprocess/{tcProcessId}": {
      "get": {
        "tags": ["Test Step"],
        "summary": "Get All test steps by test case proccess Id",
        "operationId": "getAllUsingGET_3",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tcProcessId",
            "in": "path",
            "description": "tcProcessId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved  Test Case Processs",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testStep/updateReusable/{id}": {
      "put": {
        "tags": ["Test Step"],
        "summary": "Update Reusable flow as Test Step",
        "operationId": "updateReusableFlowAsStepUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": { "$ref": "#/definitions/AddReusableAsStepReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TestStepDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testStep/{id}": {
      "get": {
        "tags": ["Test Step"],
        "summary": "Get Test Step by Id",
        "operationId": "getUsingGET_12",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Test Step",
            "schema": { "$ref": "#/definitions/TestStepDTO" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Test Step"],
        "summary": "Update Test Step",
        "operationId": "updateTestStepUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TestStepUpdateReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Test Step",
            "schema": { "$ref": "#/definitions/TestStepDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testplan": {
      "post": {
        "tags": ["Test Plan"],
        "summary": "Create New TestPlan",
        "operationId": "addTestPlanUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/TestPlanRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created TestPlan",
            "schema": { "$ref": "#/definitions/TestPlanDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testplan/delete-multi": {
      "delete": {
        "tags": ["Test Plan"],
        "summary": "Delete testplans",
        "operationId": "deleteTestplansUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "paylod",
            "description": "paylod",
            "required": true,
            "schema": { "$ref": "#/definitions/TestPlanMultiDelReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted testplans",
            "schema": { "type": "boolean" }
          },
          "204": { "description": "No Content" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testplan/project/{projectId}": {
      "get": {
        "tags": ["Test Plan"],
        "summary": "Get All TestPlans by project Id",
        "operationId": "getTestPlansUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paged",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sort.sorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort.unsorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "unpaged",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved  TestPlans",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/testplan/{id}": {
      "get": {
        "tags": ["Test Plan"],
        "summary": "Get TestPlan by Id",
        "operationId": "getTestPlanDetailUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved TestPlan",
            "schema": { "$ref": "#/definitions/TestPlanDto" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Test Plan"],
        "summary": "Update TestPlan",
        "operationId": "updateTestPlanUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/TestPlanRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated TestPlan",
            "schema": { "$ref": "#/definitions/TestPlanDto" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Test Plan"],
        "summary": "Delete TestPlan",
        "operationId": "deleteTestPlanUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted TestPlan",
            "schema": { "type": "boolean" }
          },
          "204": { "description": "No Content" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tpfolder": {
      "post": {
        "tags": ["Test Plan folder"],
        "summary": "Create New Tp Folder",
        "operationId": "createFolderUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TpFolderReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created folder",
            "schema": { "$ref": "#/definitions/TpFolderDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tpfolder/delete-multi": {
      "delete": {
        "tags": ["Test Plan folder"],
        "summary": "Delete TpFolders",
        "operationId": "deleteTpFoldersUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "paylod",
            "description": "paylod",
            "required": true,
            "schema": { "$ref": "#/definitions/MultiDelReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted tpFolders",
            "schema": { "type": "boolean" }
          },
          "204": { "description": "No Content" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tpfolder/parent/{parentId}": {
      "get": {
        "tags": ["Test Plan folder"],
        "summary": "Get All folders as list by parentId",
        "operationId": "getAllChildsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "nested",
            "in": "query",
            "description": "nested",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentId",
            "in": "path",
            "description": "parentId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved  folders",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tpfolder/testplan/{testplanId}": {
      "get": {
        "tags": ["Test Plan folder"],
        "summary": "Get All folders as list by test plan Id",
        "operationId": "getAllListUsingGET_8",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "testplanId",
            "in": "path",
            "description": "testplanId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved  folders",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tpfolder/testplan/{testplanId}/paged": {
      "get": {
        "tags": ["Test Plan folder"],
        "summary": "Get All folders with pageable by test plan Id",
        "operationId": "getAllUsingGET_4",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paged",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort.sorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort.unsorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "testplanId",
            "in": "path",
            "description": "testplanId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "unpaged",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved  folders",
            "schema": { "type": "object" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tpfolder/{id}": {
      "get": {
        "tags": ["Test Plan folder"],
        "summary": "Get Tp Folder by Id",
        "operationId": "getUsingGET_13",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved folder",
            "schema": { "$ref": "#/definitions/TpFolderDTO" }
          },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "put": {
        "tags": ["Test Plan folder"],
        "summary": "Update folder",
        "operationId": "updateFolderUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TpFolderUpdateReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated folder",
            "schema": { "$ref": "#/definitions/TpFolderDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      },
      "delete": {
        "tags": ["Test Plan folder"],
        "summary": "Delete TpFolder",
        "operationId": "deleteTpFolderUsingDELETE_2",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted TpFolder",
            "schema": { "type": "boolean" }
          },
          "204": { "description": "No Content" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tpfolder/{id}/copy": {
      "post": {
        "tags": ["Test Plan folder"],
        "summary": "Copy TpFolder",
        "operationId": "copyTpFolderUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TpFolderCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully copied TpFolder",
            "schema": { "$ref": "#/definitions/TpFolderDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    },
    "/api/tpfolder/{id}/move": {
      "put": {
        "tags": ["Test Plan folder"],
        "summary": "Move TpFolder",
        "operationId": "moveTpFolderUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/TpFolderCopyReq" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully moved TpFolder",
            "schema": { "$ref": "#/definitions/TpFolderDTO" }
          },
          "201": { "description": "Created" },
          "401": { "description": "You are not authorized" },
          "403": {
            "description": "Accessing the resource you were trying to reach is forbidden"
          },
          "404": {
            "description": "The resource you were trying to reach is not found"
          }
        },
        "security": [{ "JWT": ["global"] }]
      }
    }
  },
  "securityDefinitions": {
    "JWT": { "type": "apiKey", "name": "Authorization", "in": "header" }
  },
  "definitions": {
    "ActionParameter": {
      "type": "object",
      "properties": {
        "type": { "type": "string" },
        "value": { "type": "string" }
      },
      "title": "ActionParameter"
    },
    "AddReusableAsStepReq": {
      "type": "object",
      "required": ["reusableId", "tcProcessId"],
      "properties": {
        "reusableId": { "type": "integer", "format": "int64" },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "step": { "type": "integer", "format": "int32" },
        "tcProcessId": { "type": "integer", "format": "int64" }
      },
      "title": "AddReusableAsStepReq"
    },
    "CheckUndo": {
      "type": "object",
      "properties": {
        "isRedo": { "type": "boolean" },
        "isUndo": { "type": "boolean" }
      },
      "title": "CheckUndo"
    },
    "CreateReusableAsStepReq": {
      "type": "object",
      "required": ["name", "projectId", "tcProcessId"],
      "properties": {
        "name": { "type": "string" },
        "projectId": { "type": "integer", "format": "int64" },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "step": { "type": "integer", "format": "int32" },
        "tcProcessId": { "type": "integer", "format": "int64" }
      },
      "title": "CreateReusableAsStepReq"
    },
    "DataFileDTO": {
      "type": "object",
      "properties": {
        "fileSize": {
          "type": "integer",
          "format": "int32",
          "description": "File Size in KB"
        },
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string", "description": "Document Name" },
        "skey": { "type": "string", "description": "Path key" }
      },
      "title": "DataFileDTO"
    },
    "DataSetDTO": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "properties": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        }
      },
      "title": "DataSetDTO"
    },
    "DataSetList": {
      "type": "object",
      "properties": {
        "dataSets": {
          "type": "array",
          "items": { "$ref": "#/definitions/DataSetDTO" }
        }
      },
      "title": "DataSetList"
    },
    "DataSetReq": {
      "type": "object",
      "required": ["name", "testCaseId"],
      "properties": {
        "name": { "type": "string" },
        "properties": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "testCaseId": { "type": "integer", "format": "int64" }
      },
      "title": "DataSetReq"
    },
    "DebugActionList": {
      "type": "object",
      "properties": {
        "debugSteps": {
          "type": "array",
          "items": { "type": "integer", "format": "int64" }
        }
      },
      "title": "DebugActionList"
    },
    "DebugStepList": {
      "type": "object",
      "properties": {
        "debugSteps": {
          "type": "array",
          "items": { "$ref": "#/definitions/TestStepDTO" }
        }
      },
      "title": "DebugStepList"
    },
    "DocumentByKeyReq": {
      "type": "object",
      "properties": { "key": { "type": "string" } },
      "title": "DocumentByKeyReq"
    },
    "ExcelDataRequest": {
      "type": "object",
      "properties": {
        "dataRow": { "type": "integer", "format": "int32" },
        "headerRow": { "type": "integer", "format": "int32" },
        "sheetName": { "type": "string" }
      },
      "title": "ExcelDataRequest"
    },
    "ExecutionHistory": {
      "type": "object",
      "properties": {
        "createdDateTime": { "type": "string" },
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "pass": { "type": "boolean" }
      },
      "title": "ExecutionHistory"
    },
    "ExecutionHistoryList": {
      "type": "object",
      "properties": {
        "executionHistories": {
          "type": "array",
          "items": { "$ref": "#/definitions/ExecutionHistory" }
        }
      },
      "title": "ExecutionHistoryList"
    },
    "ExecutionResultResponse": {
      "type": "object",
      "properties": {
        "executionResult": {
          "type": "array",
          "items": { "$ref": "#/definitions/TcSwimlaneExResultDTO" }
        }
      },
      "title": "ExecutionResultResponse"
    },
    "ExecutionSuiteDTO": {
      "type": "object",
      "properties": {
        "executionSuiteTestCases": {
          "type": "array",
          "items": { "$ref": "#/definitions/ExecutionSuiteTestCaseDTO" }
        },
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" }
      },
      "title": "ExecutionSuiteDTO"
    },
    "ExecutionSuiteList": {
      "type": "object",
      "properties": {
        "executionSuites": { "$ref": "#/definitions/Page«ExecutionSuiteDTO»" }
      },
      "title": "ExecutionSuiteList"
    },
    "ExecutionSuiteReq": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "projectId": { "type": "integer", "format": "int64" }
      },
      "title": "ExecutionSuiteReq"
    },
    "ExecutionSuiteRunReq": {
      "type": "object",
      "required": ["browserType", "executionSuiteId", "name"],
      "properties": {
        "browserType": {
          "type": "string",
          "enum": ["CHROME", "EDGE", "FIRE_FOX", "IE", "SAFARI"]
        },
        "buildNumber": { "type": "string" },
        "executionSuiteId": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "testCases": {
          "type": "array",
          "items": { "$ref": "#/definitions/ExecutionSuiteRunTestCaseReq" }
        },
        "userIds": {
          "type": "array",
          "items": { "type": "integer", "format": "int64" }
        }
      },
      "title": "ExecutionSuiteRunReq"
    },
    "ExecutionSuiteRunResponse": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "runId": { "type": "integer", "format": "int64" }
      },
      "title": "ExecutionSuiteRunResponse"
    },
    "ExecutionSuiteRunTestCase": {
      "type": "object",
      "properties": {
        "dataSet": { "type": "string" },
        "resultId": { "type": "integer", "format": "int64" },
        "sequence": { "type": "integer", "format": "int32" },
        "testCaseId": { "type": "integer", "format": "int64" }
      },
      "title": "ExecutionSuiteRunTestCase"
    },
    "ExecutionSuiteRunTestCaseReq": {
      "type": "object",
      "properties": {
        "dataTag": { "type": "string" },
        "sequence": { "type": "integer", "format": "int32" },
        "testCaseId": { "type": "integer", "format": "int64" }
      },
      "title": "ExecutionSuiteRunTestCaseReq"
    },
    "ExecutionSuiteScopeReq": {
      "type": "object",
      "properties": {
        "testCaseIds": {
          "type": "array",
          "items": { "type": "integer", "format": "int64" }
        }
      },
      "title": "ExecutionSuiteScopeReq"
    },
    "ExecutionSuiteTestCaseDTO": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "lastRun": { "$ref": "#/definitions/ExecutionSuiteTestCaseLastRunDTO" },
        "path": { "type": "string" },
        "sequence": { "type": "integer", "format": "int32" },
        "testCase": { "$ref": "#/definitions/SuiteTestCaseDTO" }
      },
      "title": "ExecutionSuiteTestCaseDTO"
    },
    "ExecutionSuiteTestCaseLastRunDTO": {
      "type": "object",
      "properties": {
        "createdDate": { "type": "string", "example": "yyyy-MM-dd HH:mm:ss" },
        "result": { "type": "boolean" },
        "runName": { "type": "string" },
        "userInfo": { "$ref": "#/definitions/UserInfo" }
      },
      "title": "ExecutionSuiteTestCaseLastRunDTO"
    },
    "ExecutionSuiteTestCaseList": {
      "type": "object",
      "properties": {
        "suiteTestCases": {
          "type": "array",
          "items": { "$ref": "#/definitions/ExecutionSuiteTestCaseDTO" }
        }
      },
      "title": "ExecutionSuiteTestCaseList"
    },
    "ExecutionSuiteUpdateReq": {
      "type": "object",
      "properties": {
        "executionSuiteId": { "type": "integer", "format": "int64" },
        "testCaseIds": {
          "type": "array",
          "items": { "type": "integer", "format": "int64" }
        }
      },
      "title": "ExecutionSuiteUpdateReq"
    },
    "HtmlElementDto": {
      "type": "object",
      "properties": {
        "friendlyName": { "type": "string" },
        "htmlPageId": { "type": "integer", "format": "int64" },
        "locators": {
          "type": "array",
          "items": { "$ref": "#/definitions/HtmlElementLocator" }
        },
        "tag": { "type": "string" }
      },
      "title": "HtmlElementDto"
    },
    "HtmlElementLocator": {
      "type": "object",
      "properties": {
        "type": { "type": "string" },
        "value": { "type": "string" }
      },
      "title": "HtmlElementLocator"
    },
    "Image": {
      "type": "object",
      "properties": {
        "content": { "type": "string", "format": "byte" },
        "id": { "type": "string" }
      },
      "title": "Image"
    },
    "InputStream": { "type": "object", "title": "InputStream" },
    "LinkedTestCasesDto": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" }
      },
      "title": "LinkedTestCasesDto"
    },
    "LocatorDTO": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "locatorId": { "type": "integer", "format": "int64" },
        "locatorName": { "type": "string" },
        "objectProperty": { "type": "string" },
        "sequence": { "type": "integer", "format": "int32" }
      },
      "title": "LocatorDTO"
    },
    "LocatorRequest": {
      "type": "object",
      "properties": {
        "locatorId": { "type": "integer", "format": "int64" },
        "objectProperty": { "type": "string" },
        "sequence": { "type": "integer", "format": "int32" },
        "testObjectId": { "type": "integer", "format": "int64" }
      },
      "title": "LocatorRequest"
    },
    "LoginDto": {
      "type": "object",
      "required": ["password", "username"],
      "properties": {
        "password": { "type": "string" },
        "username": { "type": "string" }
      },
      "title": "LoginDto"
    },
    "MultiDelReq": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": { "type": "integer", "format": "int64" }
        },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        }
      },
      "title": "MultiDelReq"
    },
    "MultiDelSwimlaneReq": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": { "type": "integer", "format": "int64" }
        },
        "processSeqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        }
      },
      "title": "MultiDelSwimlaneReq"
    },
    "NextAvailablePrcDTO": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" }
      },
      "title": "NextAvailablePrcDTO"
    },
    "ObjectFolderDTO": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "objectPages": {
          "type": "array",
          "items": { "$ref": "#/definitions/ObjectPageDTO" }
        },
        "parentFolderId": { "type": "integer", "format": "int64" },
        "projectId": { "type": "integer", "format": "int64" }
      },
      "title": "ObjectFolderDTO"
    },
    "ObjectFolderListRes": {
      "type": "object",
      "properties": {
        "objectFolders": {
          "type": "array",
          "items": { "$ref": "#/definitions/ObjectFolderRes" }
        }
      },
      "title": "ObjectFolderListRes"
    },
    "ObjectFolderReq": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": { "type": "string" },
        "parentFolderId": { "type": "integer", "format": "int64" },
        "projectId": { "type": "integer", "format": "int64" }
      },
      "title": "ObjectFolderReq"
    },
    "ObjectFolderRes": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "objectPages": {
          "type": "array",
          "items": { "$ref": "#/definitions/ObjectPageRes" }
        },
        "subFolders": {
          "type": "array",
          "items": { "$ref": "#/definitions/ObjectFolderRes" }
        }
      },
      "title": "ObjectFolderRes"
    },
    "ObjectPageCopyReq": {
      "type": "object",
      "properties": {
        "objectFolderId": { "type": "integer", "format": "int64" }
      },
      "title": "ObjectPageCopyReq"
    },
    "ObjectPageDTO": {
      "type": "object",
      "properties": {
        "folderId": { "type": "integer", "format": "int64" },
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "testObjects": {
          "type": "array",
          "items": { "$ref": "#/definitions/TestObjectDTO" }
        }
      },
      "title": "ObjectPageDTO"
    },
    "ObjectPageReq": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "folderId": { "type": "integer", "format": "int64" },
        "name": { "type": "string" }
      },
      "title": "ObjectPageReq"
    },
    "ObjectPageRes": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "testObjects": {
          "type": "array",
          "items": { "$ref": "#/definitions/TestObjectRes" }
        }
      },
      "title": "ObjectPageRes"
    },
    "PStatus": {
      "type": "object",
      "properties": {
        "description": { "type": "string", "minLength": 0, "maxLength": 64 },
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string", "minLength": 0, "maxLength": 32 }
      },
      "title": "PStatus"
    },
    "Pageable": {
      "type": "object",
      "properties": {
        "offset": { "type": "integer", "format": "int64" },
        "pageNumber": { "type": "integer", "format": "int32" },
        "pageSize": { "type": "integer", "format": "int32" },
        "paged": { "type": "boolean" },
        "sort": { "$ref": "#/definitions/Sort" },
        "unpaged": { "type": "boolean" }
      },
      "title": "Pageable"
    },
    "Page«ExecutionSuiteDTO»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": { "$ref": "#/definitions/ExecutionSuiteDTO" }
        },
        "empty": { "type": "boolean" },
        "first": { "type": "boolean" },
        "last": { "type": "boolean" },
        "number": { "type": "integer", "format": "int32" },
        "numberOfElements": { "type": "integer", "format": "int32" },
        "pageable": { "$ref": "#/definitions/Pageable" },
        "size": { "type": "integer", "format": "int32" },
        "sort": { "$ref": "#/definitions/Sort" },
        "totalElements": { "type": "integer", "format": "int64" },
        "totalPages": { "type": "integer", "format": "int32" }
      },
      "title": "Page«ExecutionSuiteDTO»"
    },
    "ProcessActionDTO": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "testSteps": {
          "type": "array",
          "items": { "$ref": "#/definitions/TestStepActionDto" }
        }
      },
      "title": "ProcessActionDTO"
    },
    "ProjectDto": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "endDate": { "type": "string", "format": "date-time" },
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "priorityId": { "type": "integer", "format": "int64" },
        "startDate": { "type": "string", "format": "date-time" },
        "statusId": { "type": "integer", "format": "int64" },
        "testCaseCount": { "type": "integer", "format": "int64" }
      },
      "title": "ProjectDto"
    },
    "ProjectMultiDelReq": {
      "type": "object",
      "properties": {
        "projectIds": {
          "type": "array",
          "items": { "type": "integer", "format": "int64" }
        }
      },
      "title": "ProjectMultiDelReq"
    },
    "ProjectRequest": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "description": { "type": "string" },
        "endDate": { "type": "string", "example": "yyyy-MM-dd HH:mm:ss" },
        "name": { "type": "string" },
        "priorityId": { "type": "integer", "format": "int64" },
        "startDate": { "type": "string", "example": "yyyy-MM-dd HH:mm:ss" },
        "statusId": { "type": "integer", "format": "int64" }
      },
      "title": "ProjectRequest"
    },
    "RecordTestStepReq": {
      "type": "object",
      "properties": {
        "element": { "$ref": "#/definitions/HtmlElementDto" },
        "makeScreenshot": { "type": "boolean" },
        "pageTitle": { "type": "string" },
        "type": { "type": "string" },
        "value": { "type": "string" },
        "willSuspend": { "type": "boolean" }
      },
      "title": "RecordTestStepReq"
    },
    "Resource": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "file": { "type": "file" },
        "filename": { "type": "string" },
        "inputStream": { "$ref": "#/definitions/InputStream" },
        "open": { "type": "boolean" },
        "readable": { "type": "boolean" },
        "uri": { "type": "string", "format": "uri" },
        "url": { "type": "string", "format": "url" }
      },
      "title": "Resource"
    },
    "RestApiStepDTO": {
      "type": "object",
      "properties": {
        "actionEvent": { "type": "string" },
        "headers": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "requestBody": { "type": "string" },
        "requestBodyType1": { "type": "string" },
        "requestBodyType2": { "type": "string" },
        "requestType": { "type": "string" },
        "requestUrl": { "type": "string" }
      },
      "title": "RestApiStepDTO"
    },
    "RestApiStepReq": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "name": { "type": "string" },
        "requestBody": { "type": "string" },
        "requestBodyType1": { "type": "string" },
        "requestBodyType2": { "type": "string" },
        "requestType": { "type": "string" },
        "requestUrl": { "type": "string" },
        "reusableFlowId": { "type": "integer", "format": "int64" }
      },
      "title": "RestApiStepReq"
    },
    "ReusableCopyReq": {
      "type": "object",
      "properties": {
        "sourceReusableFlowId": { "type": "integer", "format": "int64" },
        "targetReusableFolderId": { "type": "integer", "format": "int64" }
      },
      "title": "ReusableCopyReq"
    },
    "ReusableDto": {
      "type": "object",
      "properties": {
        "createdBy": { "type": "string" },
        "createdDate": { "type": "string", "example": "yyyy-MM-dd HH:mm:ss" },
        "id": { "type": "integer", "format": "int64" },
        "lastModifiedBy": { "type": "string" },
        "lastModifiedDate": {
          "type": "string",
          "example": "yyyy-MM-dd HH:mm:ss"
        },
        "linkedTestCases": {
          "type": "array",
          "items": { "$ref": "#/definitions/LinkedTestCasesDto" }
        },
        "name": { "type": "string" },
        "restApiStep": { "$ref": "#/definitions/RestApiStepDTO" },
        "testSteps": {
          "type": "array",
          "items": { "$ref": "#/definitions/ReusableTestStepDto" }
        },
        "type": { "type": "integer", "format": "int64" }
      },
      "title": "ReusableDto"
    },
    "ReusableDtoList": {
      "type": "object",
      "properties": {
        "reusableFlows": {
          "type": "array",
          "items": { "$ref": "#/definitions/ReusableDto" }
        }
      },
      "title": "ReusableDtoList"
    },
    "ReusableFolderCopyReq": {
      "type": "object",
      "properties": {
        "reusableFolderId": { "type": "integer", "format": "int64" }
      },
      "title": "ReusableFolderCopyReq"
    },
    "ReusableFolderDTO": {
      "type": "object",
      "properties": {
        "createdBy": { "type": "string" },
        "createdDate": { "type": "string", "example": "yyyy-MM-dd HH:mm:ss" },
        "id": { "type": "integer", "format": "int64" },
        "lastModifiedBy": { "type": "string" },
        "lastModifiedDate": {
          "type": "string",
          "example": "yyyy-MM-dd HH:mm:ss"
        },
        "name": { "type": "string" },
        "parentFolderId": { "type": "integer", "format": "int64" },
        "reusableFlows": {
          "type": "array",
          "items": { "$ref": "#/definitions/ReusableDto" }
        }
      },
      "title": "ReusableFolderDTO"
    },
    "ReusableFolderReq": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "parentFolderId": { "type": "integer", "format": "int64" },
        "projectId": { "type": "integer", "format": "int64" }
      },
      "title": "ReusableFolderReq"
    },
    "ReusableLockDto": {
      "type": "object",
      "properties": {
        "createdDate": { "type": "string", "example": "yyyy-MM-dd HH:mm:ss" },
        "reusableFlowId": { "type": "integer", "format": "int64" },
        "user": { "$ref": "#/definitions/UserInfo" }
      },
      "title": "ReusableLockDto"
    },
    "ReusableReq": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "folderId": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "projectId": { "type": "integer", "format": "int64" },
        "type": { "type": "integer", "format": "int64" }
      },
      "title": "ReusableReq"
    },
    "ReusableStartExecuteRequest": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "browserType": {
          "type": "string",
          "enum": ["CHROME", "EDGE", "FIRE_FOX", "IE", "SAFARI"]
        },
        "datasetName": { "type": "string" },
        "name": { "type": "string" },
        "reusableId": { "type": "integer", "format": "int64" }
      },
      "title": "ReusableStartExecuteRequest"
    },
    "ReusableStartExecuteResponse": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" }
      },
      "title": "ReusableStartExecuteResponse"
    },
    "ReusableTestParameterDto": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "parameterKey": { "type": "integer", "format": "int64" },
        "parameterName": { "type": "string" },
        "parameterValue": { "type": "string" }
      },
      "title": "ReusableTestParameterDto"
    },
    "ReusableTestParameterReq": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "parameterKey": { "type": "integer", "format": "int64" },
        "parameterName": { "type": "string" },
        "parameterValue": { "type": "string" }
      },
      "title": "ReusableTestParameterReq"
    },
    "ReusableTestStepDto": {
      "type": "object",
      "properties": {
        "actionEvent": { "type": "integer", "format": "int32" },
        "debug": { "type": "boolean" },
        "id": { "type": "integer", "format": "int64" },
        "makeScreenshot": { "type": "boolean" },
        "note": { "type": "string" },
        "pause": { "type": "boolean" },
        "reusableTestParameters": {
          "type": "array",
          "items": { "$ref": "#/definitions/ReusableTestParameterDto" }
        },
        "step": { "type": "integer", "format": "int32" },
        "testObject": { "$ref": "#/definitions/TestObjectDTO" }
      },
      "title": "ReusableTestStepDto"
    },
    "ReusableTestStepReq": {
      "type": "object",
      "properties": {
        "actionEvent": { "type": "integer", "format": "int32" },
        "active": { "type": "boolean" },
        "debug": { "type": "boolean" },
        "makeScreenshot": { "type": "boolean" },
        "note": { "type": "string" },
        "pause": { "type": "boolean" },
        "reusableId": { "type": "integer", "format": "int64" },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "step": { "type": "integer", "format": "int32" },
        "testObjectId": { "type": "integer", "format": "int64" },
        "testParameters": {
          "type": "array",
          "items": { "$ref": "#/definitions/ReusableTestParameterReq" }
        }
      },
      "title": "ReusableTestStepReq"
    },
    "SeqNumReq": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "step": { "type": "integer", "format": "int32" }
      },
      "title": "SeqNumReq"
    },
    "Sort": {
      "type": "object",
      "properties": {
        "empty": { "type": "boolean" },
        "sorted": { "type": "boolean" },
        "unsorted": { "type": "boolean" }
      },
      "title": "Sort"
    },
    "StartDebugReq": {
      "type": "object",
      "properties": {
        "browser": { "type": "string" },
        "dataSetName": { "type": "string" },
        "name": { "type": "string" },
        "testCaseId": { "type": "integer", "format": "int64" },
        "url": { "type": "string" }
      },
      "title": "StartDebugReq"
    },
    "StartDebugResponse": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" }
      },
      "title": "StartDebugResponse"
    },
    "StartExecuteRequest": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "browserType": {
          "type": "string",
          "enum": ["CHROME", "EDGE", "FIRE_FOX", "IE", "SAFARI"]
        },
        "datasetName": { "type": "string" },
        "name": { "type": "string" },
        "testCaseId": { "type": "integer", "format": "int64" }
      },
      "title": "StartExecuteRequest"
    },
    "StartExecuteResponse": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" }
      },
      "title": "StartExecuteResponse"
    },
    "SuiteTestCaseDTO": {
      "type": "object",
      "properties": {
        "dataSets": {
          "type": "array",
          "items": { "$ref": "#/definitions/DataSetDTO" }
        },
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" }
      },
      "title": "SuiteTestCaseDTO"
    },
    "SwimlaneActionDTO": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "processes": {
          "type": "array",
          "items": { "$ref": "#/definitions/ProcessActionDTO" }
        }
      },
      "title": "SwimlaneActionDTO"
    },
    "SwimlaneActionDTOList": {
      "type": "object",
      "properties": {
        "swimlanes": {
          "type": "array",
          "items": { "$ref": "#/definitions/SwimlaneActionDTO" }
        }
      },
      "title": "SwimlaneActionDTOList"
    },
    "TcActivityLogReq": {
      "type": "object",
      "required": ["messages"],
      "properties": {
        "messages": { "type": "array", "items": { "type": "string" } }
      },
      "title": "TcActivityLogReq"
    },
    "TcLockDTO": {
      "type": "object",
      "properties": {
        "createdDate": { "type": "string", "example": "yyyy-MM-dd HH:mm:ss" },
        "testCaseId": { "type": "integer", "format": "int64" },
        "user": { "$ref": "#/definitions/UserInfo" }
      },
      "title": "TcLockDTO"
    },
    "TcProcessConnectReq": {
      "type": "object",
      "properties": {
        "actionType": {
          "type": "string",
          "description": "Action Type, allowed values in lowercase connect/disconnect"
        },
        "isSourceisDecision": {
          "type": "boolean",
          "description": "Connect decision of process to next, if true means only decision of src connect to target"
        },
        "sourceId": {
          "type": "integer",
          "format": "int64",
          "description": "Source Process ID"
        },
        "targetId": {
          "type": "integer",
          "format": "int64",
          "description": "Target Process ID, In case connect to END then pass target =null"
        }
      },
      "title": "TcProcessConnectReq",
      "description": "Process connect request."
    },
    "TcProcessCopyReq": {
      "type": "object",
      "required": ["actionPerformedId"],
      "properties": {
        "actionPerformedId": {
          "type": "integer",
          "format": "int64",
          "description": "Process ID of process on which Paste action is performed"
        },
        "id": { "type": "integer", "format": "int64" },
        "isDecision": { "type": "boolean" },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Process order"
        },
        "tcSwimlaneId": {
          "type": "integer",
          "format": "int64",
          "description": "Swimlane id"
        }
      },
      "title": "TcProcessCopyReq",
      "description": "Process copy request DTO."
    },
    "TcProcessCutReq": {
      "type": "object",
      "required": ["actionPerformedId"],
      "properties": {
        "actionPerformedId": {
          "type": "integer",
          "format": "int64",
          "description": "Process ID of process on which Paste action is performed"
        },
        "cutPrcNextId": {
          "type": "integer",
          "format": "int64",
          "description": "CUT process Next Id "
        },
        "cutPrcPrevIds": {
          "type": "array",
          "description": "CUT process Previous ID's ",
          "items": { "type": "integer", "format": "int64" }
        },
        "cutProcessId": {
          "type": "integer",
          "format": "int64",
          "description": "Cut Process ID"
        },
        "isCutProcessIsDecision": {
          "type": "boolean",
          "description": "Cut process is Decision or not"
        },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Process order"
        },
        "tcSwimlaneId": {
          "type": "integer",
          "format": "int64",
          "description": "Swimlane id"
        }
      },
      "title": "TcProcessCutReq",
      "description": "Process cut request DTO."
    },
    "TcProcessDTO": {
      "type": "object",
      "properties": {
        "createdBy": { "type": "string" },
        "createdDate": { "type": "string", "example": "yyyy-MM-dd HH:mm:ss" },
        "decisionAction": { "type": "string" },
        "decisionProcessId": { "type": "integer", "format": "int64" },
        "expectedResult": {
          "type": "string",
          "description": "Process expected result"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Process id"
        },
        "isDecision": {
          "type": "boolean",
          "description": "Process decision flag"
        },
        "isDecisionNextEnd": { "type": "boolean" },
        "isInvalidNextAndPrev": { "type": "boolean" },
        "isNextEnd": { "type": "boolean" },
        "lastModifiedBy": { "type": "string" },
        "lastModifiedDate": {
          "type": "string",
          "example": "yyyy-MM-dd HH:mm:ss"
        },
        "name": { "type": "string", "description": "Process name" },
        "nextId": { "type": "integer", "format": "int64" },
        "note": { "type": "string", "description": "Process note" },
        "prevIds": {
          "type": "array",
          "items": { "type": "integer", "format": "int64" }
        },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Process order"
        },
        "stepToExecute": {
          "type": "string",
          "description": "Process to execute"
        },
        "swimlaneId": { "type": "integer", "format": "int64" },
        "testSteps": {
          "type": "array",
          "description": "test step list",
          "items": { "$ref": "#/definitions/TestStepDTO" }
        }
      },
      "title": "TcProcessDTO",
      "description": "Process response DTO."
    },
    "TcProcessDecisionReq": {
      "type": "object",
      "required": ["actionPerformedId", "tcSwimlaneId"],
      "properties": {
        "actionPerformedId": {
          "type": "integer",
          "format": "int64",
          "description": "Process ID of process on which action is performed"
        },
        "decisionAction": {
          "type": "string",
          "description": "Decision Action YES/NO"
        },
        "decisionProcessId": {
          "type": "integer",
          "format": "int64",
          "description": "Decision Process ID"
        },
        "isDecision": { "type": "boolean" },
        "name": { "type": "string", "description": "Process name" },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Process order"
        },
        "tcSwimlaneId": {
          "type": "integer",
          "format": "int64",
          "description": "Swimlane id"
        }
      },
      "title": "TcProcessDecisionReq",
      "description": "Process decision create request DTO."
    },
    "TcProcessExResultDTO": {
      "type": "object",
      "properties": {
        "decisionAction": { "type": "string" },
        "decisionProcessId": { "type": "integer", "format": "int64" },
        "expectedResult": { "type": "string" },
        "id": { "type": "integer", "format": "int64" },
        "isDecision": { "type": "boolean" },
        "isDecisionNextEnd": { "type": "boolean" },
        "isNextEnd": { "type": "boolean" },
        "name": { "type": "string" },
        "nextId": { "type": "integer", "format": "int64" },
        "nextProcess": { "type": "string" },
        "note": { "type": "string" },
        "processId": { "type": "integer", "format": "int64" },
        "processResult": { "type": "boolean" },
        "step": { "type": "integer", "format": "int32" },
        "testStepExResults": {
          "type": "array",
          "items": { "$ref": "#/definitions/TestStepExResultDTO" }
        }
      },
      "title": "TcProcessExResultDTO"
    },
    "TcProcessReq": {
      "type": "object",
      "required": ["actionPerformedId", "tcSwimlaneId"],
      "properties": {
        "actionPerformedId": {
          "type": "integer",
          "format": "int64",
          "description": "Process ID of process on which action is performed"
        },
        "decisionAction": {
          "type": "string",
          "description": "Decision Action YES/NO"
        },
        "decisionProcessId": {
          "type": "integer",
          "format": "int64",
          "description": "Decision Process ID"
        },
        "expectedResult": { "type": "string" },
        "name": { "type": "string", "description": "Process name" },
        "note": { "type": "string", "description": "Process note" },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Process order"
        },
        "tcSwimlaneId": {
          "type": "integer",
          "format": "int64",
          "description": "Swimlane id"
        },
        "testSteps": {
          "type": "array",
          "description": "Test Steps",
          "items": { "$ref": "#/definitions/TestStepReq" }
        }
      },
      "title": "TcProcessReq",
      "description": "Process create request DTO."
    },
    "TcProcessUpdateReq": {
      "type": "object",
      "properties": {
        "expectedResult": { "type": "string" },
        "name": { "type": "string", "description": "Process name" },
        "note": { "type": "string", "description": "Process note" },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Process order"
        },
        "tcProcessConnectReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/TcProcessConnectReq" }
        },
        "tcSwimlaneId": {
          "type": "integer",
          "format": "int64",
          "description": "Swimlane id"
        },
        "testSteps": {
          "type": "array",
          "description": "Step list",
          "items": { "$ref": "#/definitions/TestStepUpdateReq" }
        }
      },
      "title": "TcProcessUpdateReq",
      "description": "Process update request DTO."
    },
    "TcSwimlaneDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Swimlane id"
        },
        "name": { "type": "string", "description": "Swimlane name" },
        "note": { "type": "string", "description": "Swimlane note" },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Swimlane order"
        },
        "tcProcesses": {
          "type": "array",
          "description": "Process list",
          "items": { "$ref": "#/definitions/TcProcessDTO" }
        }
      },
      "title": "TcSwimlaneDTO",
      "description": "Swimlane response DTO."
    },
    "TcSwimlaneExResultDTO": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "note": { "type": "string" },
        "swimlaneId": { "type": "integer", "format": "int64" },
        "tcProcessExResults": {
          "type": "array",
          "items": { "$ref": "#/definitions/TcProcessExResultDTO" }
        }
      },
      "title": "TcSwimlaneExResultDTO"
    },
    "TcSwimlaneMoveReq": {
      "type": "object",
      "properties": {
        "pasteActionProcessId": { "type": "integer", "format": "int64" },
        "processSeqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        }
      },
      "title": "TcSwimlaneMoveReq",
      "description": "Swimlane move request DTO."
    },
    "TcSwimlaneMoveSingleReq": {
      "type": "object",
      "required": ["tcProcessCutReq"],
      "properties": {
        "processSeqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "tcProcessCutReq": {
          "description": "Cut Process req",
          "$ref": "#/definitions/TcProcessCutReq"
        }
      },
      "title": "TcSwimlaneMoveSingleReq",
      "description": "Cut single process from swimlane"
    },
    "TcSwimlaneReq": {
      "type": "object",
      "properties": {
        "name": { "type": "string", "description": "Swimlane name" },
        "note": { "type": "string", "description": "Swimlane note" },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Swimlane order"
        },
        "tcProcesses": {
          "type": "array",
          "description": "Process list",
          "items": { "$ref": "#/definitions/TcProcessReq" }
        },
        "testCaseId": {
          "type": "integer",
          "format": "int64",
          "description": "Test case id"
        }
      },
      "title": "TcSwimlaneReq",
      "description": "Swimlane create request DTO."
    },
    "TcSwimlaneUpdateReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Swimlane id"
        },
        "name": { "type": "string", "description": "Swimlane name" },
        "note": { "type": "string", "description": "Swimlane note" },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Swimlane order"
        },
        "tcProcesses": {
          "type": "array",
          "description": "Process list",
          "items": { "$ref": "#/definitions/TcProcessUpdateReq" }
        }
      },
      "title": "TcSwimlaneUpdateReq",
      "description": "Swimlane update request DTO."
    },
    "TestCaseCopyReq": {
      "type": "object",
      "properties": {
        "testPlanId": {
          "type": "integer",
          "format": "int64",
          "description": "Copy target test plan id"
        },
        "tpFolderId": {
          "type": "integer",
          "format": "int64",
          "description": "Copy target folder id"
        }
      },
      "title": "TestCaseCopyReq",
      "description": "Test case copy request DTO."
    },
    "TestCaseDto": {
      "type": "object",
      "properties": {
        "automatedId": { "type": "integer", "format": "int64" },
        "categoryId": { "type": "integer", "format": "int64" },
        "cycleId": { "type": "integer", "format": "int64" },
        "dataFile": { "$ref": "#/definitions/DataFileDTO" },
        "dataSets": {
          "type": "array",
          "items": { "$ref": "#/definitions/DataSetDTO" }
        },
        "description": { "type": "string" },
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "objective": { "type": "string" },
        "preCondition": { "type": "string" },
        "priorityId": { "type": "integer", "format": "int64" },
        "releaseId": { "type": "integer", "format": "int64" },
        "statusId": { "type": "integer", "format": "int64" },
        "tcSwimlanes": {
          "type": "array",
          "items": { "$ref": "#/definitions/TcSwimlaneDTO" }
        },
        "testPlanId": { "type": "integer", "format": "int64" },
        "testcaseTypeId": { "type": "integer", "format": "int64" },
        "tpFolderId": { "type": "integer", "format": "int64" }
      },
      "title": "TestCaseDto"
    },
    "TestCaseIdsReq": {
      "type": "object",
      "properties": {
        "testCaseIds": {
          "type": "array",
          "items": { "type": "integer", "format": "int64" }
        }
      },
      "title": "TestCaseIdsReq"
    },
    "TestCasePathDTO": {
      "type": "object",
      "properties": {
        "path": { "type": "string" },
        "testCaseId": { "type": "integer", "format": "int64" }
      },
      "title": "TestCasePathDTO"
    },
    "TestCasePathsDTO": {
      "type": "object",
      "properties": {
        "testCasePathDTOS": {
          "type": "array",
          "items": { "$ref": "#/definitions/TestCasePathDTO" }
        }
      },
      "title": "TestCasePathsDTO"
    },
    "TestCaseRequest": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "automatedId": { "type": "integer", "format": "int64" },
        "categoryId": { "type": "integer", "format": "int64" },
        "cycleId": { "type": "integer", "format": "int64" },
        "description": { "type": "string" },
        "name": { "type": "string" },
        "objective": { "type": "string" },
        "preCondition": { "type": "string" },
        "priorityId": { "type": "integer", "format": "int64" },
        "releaseId": { "type": "integer", "format": "int64" },
        "statusId": { "type": "integer", "format": "int64" },
        "testPlanId": { "type": "integer", "format": "int64" },
        "testcaseTypeId": { "type": "integer", "format": "int64" },
        "tpFolderId": { "type": "integer", "format": "int64" }
      },
      "title": "TestCaseRequest"
    },
    "TestCaseUpdateReq": {
      "type": "object",
      "properties": {
        "automatedId": {
          "type": "integer",
          "format": "int64",
          "description": "Automation id"
        },
        "categoryId": {
          "type": "integer",
          "format": "int64",
          "description": "Category id"
        },
        "cycleId": {
          "type": "integer",
          "format": "int64",
          "description": "Cycle id"
        },
        "description": {
          "type": "string",
          "description": "Test case description"
        },
        "name": { "type": "string", "description": "Test case name" },
        "objective": { "type": "string", "description": "Test case objective" },
        "preCondition": { "type": "string", "description": "Pre condition" },
        "priorityId": {
          "type": "integer",
          "format": "int64",
          "description": "Priority id"
        },
        "releaseId": {
          "type": "integer",
          "format": "int64",
          "description": "Release id"
        },
        "rmTcProcessIds": {
          "type": "array",
          "description": "Removed process ids",
          "items": { "type": "integer", "format": "int64" }
        },
        "rmTcSwimlaneIds": {
          "type": "array",
          "description": "Removed swimlane ids",
          "items": { "type": "integer", "format": "int64" }
        },
        "rmTestStepIds": {
          "type": "array",
          "description": "Removed test step ids",
          "items": { "type": "integer", "format": "int64" }
        },
        "statusId": {
          "type": "integer",
          "format": "int64",
          "description": "Status id"
        },
        "testPlanId": {
          "type": "integer",
          "format": "int64",
          "description": "Test plan id"
        },
        "testcaseTypeId": { "type": "integer", "format": "int64" },
        "tpFolderId": {
          "type": "integer",
          "format": "int64",
          "description": "Folder id"
        }
      },
      "title": "TestCaseUpdateReq",
      "description": "Test case update request DTO."
    },
    "TestObjectCopyReq": {
      "type": "object",
      "properties": { "pageId": { "type": "integer", "format": "int64" } },
      "title": "TestObjectCopyReq"
    },
    "TestObjectDTO": {
      "type": "object",
      "properties": {
        "childFolderId": { "type": "integer", "format": "int64" },
        "childFolderName": { "type": "string" },
        "folderId": { "type": "integer", "format": "int64" },
        "folderName": { "type": "string" },
        "id": { "type": "integer", "format": "int64" },
        "locators": {
          "type": "array",
          "items": { "$ref": "#/definitions/LocatorDTO" }
        },
        "objectName": { "type": "string" },
        "objectTypeId": { "type": "integer", "format": "int64" },
        "pageId": { "type": "integer", "format": "int64" },
        "pageName": { "type": "string" },
        "subFolderId": { "type": "integer", "format": "int64" },
        "subFolderName": { "type": "string" }
      },
      "title": "TestObjectDTO"
    },
    "TestObjectReq": {
      "type": "object",
      "required": ["objectName"],
      "properties": {
        "locators": {
          "type": "array",
          "items": { "$ref": "#/definitions/LocatorRequest" }
        },
        "objectName": { "type": "string" },
        "objectTypeId": { "type": "integer", "format": "int64" },
        "pageId": { "type": "integer", "format": "int64" }
      },
      "title": "TestObjectReq"
    },
    "TestObjectRes": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "objectName": { "type": "string" }
      },
      "title": "TestObjectRes"
    },
    "TestObjectUpdateReq": {
      "type": "object",
      "required": ["objectName"],
      "properties": {
        "objectName": { "type": "string" },
        "objectTypeId": { "type": "integer", "format": "int64" },
        "pageId": { "type": "integer", "format": "int64" }
      },
      "title": "TestObjectUpdateReq"
    },
    "TestParameterRequest": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "parameterKey": { "type": "integer", "format": "int64" },
        "parameterName": { "type": "string" },
        "parameterValue": { "type": "string" }
      },
      "title": "TestParameterRequest"
    },
    "TestParametersDTO": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "parameterKey": { "type": "integer", "format": "int64" },
        "parameterName": { "type": "string" },
        "parameterValue": { "type": "string" }
      },
      "title": "TestParametersDTO"
    },
    "TestPlanDto": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" },
        "testCaseCount": { "type": "integer", "format": "int32" }
      },
      "title": "TestPlanDto"
    },
    "TestPlanMultiDelReq": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": { "type": "integer", "format": "int64" }
        }
      },
      "title": "TestPlanMultiDelReq"
    },
    "TestPlanRequest": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "description": { "type": "string" },
        "name": { "type": "string" },
        "projectId": { "type": "integer", "format": "int64" }
      },
      "title": "TestPlanRequest"
    },
    "TestStepActionDto": {
      "type": "object",
      "properties": {
        "element": { "$ref": "#/definitions/HtmlElementDto" },
        "id": { "type": "integer", "format": "int64" },
        "makeScreenshot": { "type": "boolean" },
        "parameters": {
          "type": "object",
          "additionalProperties": { "$ref": "#/definitions/ActionParameter" }
        },
        "restApiStep": { "$ref": "#/definitions/RestApiStepDTO" },
        "reusable": { "type": "boolean" },
        "reusableName": { "type": "string" },
        "type": { "type": "string" },
        "willSuspend": { "type": "boolean" }
      },
      "title": "TestStepActionDto"
    },
    "TestStepCopyReq": {
      "type": "object",
      "properties": {
        "copyFromReusable": { "type": "boolean" },
        "processId": { "type": "integer", "format": "int64" },
        "reusableId": { "type": "integer", "format": "int64" },
        "sourceSeqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "sourceStepId": { "type": "integer", "format": "int64" },
        "targetSeqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "targetStepId": { "type": "integer", "format": "int64" }
      },
      "title": "TestStepCopyReq"
    },
    "TestStepDTO": {
      "type": "object",
      "properties": {
        "actionEvent": { "type": "integer", "format": "int32" },
        "active": { "type": "boolean" },
        "createdBy": { "type": "string" },
        "createdDate": { "type": "string", "example": "yyyy-MM-dd HH:mm:ss" },
        "debug": { "type": "boolean" },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Step id"
        },
        "lastModifiedBy": { "type": "string" },
        "lastModifiedDate": {
          "type": "string",
          "example": "yyyy-MM-dd HH:mm:ss"
        },
        "makeScreenshot": { "type": "boolean" },
        "note": { "type": "string", "description": "Step note" },
        "pause": { "type": "boolean" },
        "processId": { "type": "integer", "format": "int64" },
        "reusable": { "type": "boolean" },
        "reusableFlow": { "$ref": "#/definitions/ReusableDto" },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Step sequence number"
        },
        "stepName": { "type": "string", "description": "Step name" },
        "swimlaneId": { "type": "integer", "format": "int64" },
        "testObject": { "$ref": "#/definitions/TestObjectDTO" },
        "testParameters": {
          "type": "array",
          "items": { "$ref": "#/definitions/TestParametersDTO" }
        }
      },
      "title": "TestStepDTO",
      "description": "Test step response DTO."
    },
    "TestStepExResultDTO": {
      "type": "object",
      "properties": {
        "actionEvent": { "type": "string" },
        "active": { "type": "boolean" },
        "debug": { "type": "boolean" },
        "id": { "type": "integer", "format": "int64" },
        "makeScreenshot": { "type": "boolean" },
        "note": { "type": "string" },
        "pass": { "type": "boolean" },
        "pause": { "type": "boolean" },
        "reusable": { "type": "boolean" },
        "reusableFlow": { "$ref": "#/definitions/ReusableDto" },
        "reusableName": { "type": "string" },
        "screenShotKey": { "type": "string" },
        "step": { "type": "integer", "format": "int32" },
        "stepName": { "type": "string" },
        "testObject": { "type": "string" },
        "testParameters": { "type": "string" }
      },
      "title": "TestStepExResultDTO"
    },
    "TestStepReq": {
      "type": "object",
      "required": ["tcProcessId"],
      "properties": {
        "actionEvent": { "type": "integer", "format": "int32" },
        "debug": { "type": "boolean" },
        "makeScreenshot": { "type": "boolean" },
        "note": { "type": "string", "description": "Step note" },
        "pause": { "type": "boolean" },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "step": { "type": "integer", "format": "int32" },
        "stepName": { "type": "string" },
        "tcProcessId": {
          "type": "integer",
          "format": "int64",
          "description": "Proces Id"
        },
        "testObjectId": { "type": "integer", "format": "int64" },
        "testParameters": {
          "type": "array",
          "items": { "$ref": "#/definitions/TestParameterRequest" }
        }
      },
      "title": "TestStepReq"
    },
    "TestStepUpdateReq": {
      "type": "object",
      "properties": {
        "actionEvent": { "type": "integer", "format": "int32" },
        "active": { "type": "boolean" },
        "debug": { "type": "boolean" },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Step id"
        },
        "makeScreenshot": { "type": "boolean" },
        "note": { "type": "string", "description": "Step note" },
        "pause": { "type": "boolean" },
        "seqNumReqs": {
          "type": "array",
          "items": { "$ref": "#/definitions/SeqNumReq" }
        },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Step order"
        },
        "stepName": { "type": "string", "description": "Step name" },
        "tcProcessId": {
          "type": "integer",
          "format": "int64",
          "description": "Process Id"
        },
        "testObjectId": { "type": "integer", "format": "int64" },
        "testParameters": {
          "type": "array",
          "items": { "$ref": "#/definitions/TestParameterRequest" }
        }
      },
      "title": "TestStepUpdateReq",
      "description": "Test step update request DTO."
    },
    "TokenRequest": {
      "type": "object",
      "properties": { "token": { "type": "string" } },
      "title": "TokenRequest"
    },
    "TpFolderCopyReq": {
      "type": "object",
      "properties": {
        "parentFolderId": {
          "type": "integer",
          "format": "int64",
          "description": "Copy target folder id"
        },
        "testPlanId": {
          "type": "integer",
          "format": "int64",
          "description": "Copy target test plan id"
        }
      },
      "title": "TpFolderCopyReq",
      "description": "Folder copy request DTO."
    },
    "TpFolderDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Folder id"
        },
        "name": { "type": "string", "description": "Folder name" },
        "parentFolderId": {
          "type": "integer",
          "format": "int64",
          "description": "Parent folder id"
        }
      },
      "title": "TpFolderDTO",
      "description": "Folder response DTO."
    },
    "TpFolderReq": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": { "type": "string", "description": "Folder name" },
        "parentFolderId": {
          "type": "integer",
          "format": "int64",
          "description": "Parent folder id"
        },
        "testPlanId": {
          "type": "integer",
          "format": "int64",
          "description": "Test plan id"
        }
      },
      "title": "TpFolderReq",
      "description": "Folder create request DTO."
    },
    "TpFolderUpdateReq": {
      "type": "object",
      "properties": {
        "name": { "type": "string", "description": "Folder name" },
        "parentFolderId": {
          "type": "integer",
          "format": "int64",
          "description": "Parent folder id"
        },
        "testPlanId": {
          "type": "integer",
          "format": "int64",
          "description": "Test plan id"
        }
      },
      "title": "TpFolderUpdateReq",
      "description": "Folder update request DTO."
    },
    "UserDto": {
      "type": "object",
      "required": ["confirmPassword", "email", "password"],
      "properties": {
        "confirmPassword": { "type": "string" },
        "email": { "type": "string" },
        "password": { "type": "string" }
      },
      "title": "UserDto"
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "createdBy": { "type": "string" },
        "createdDate": { "type": "string", "example": "yyyy-MM-dd HH:mm:ss" },
        "email": { "type": "string" },
        "id": { "type": "integer", "format": "int64" },
        "lastModifiedBy": { "type": "string" },
        "lastModifiedDate": {
          "type": "string",
          "example": "yyyy-MM-dd HH:mm:ss"
        }
      },
      "title": "UserInfo"
    }
  }
}
